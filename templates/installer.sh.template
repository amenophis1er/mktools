#!/usr/bin/env bash

# Ensure we're running in bash
if [ -z "$BASH_VERSION" ]; then
    exec bash "$0" "$@"
fi

# Exit on error, but don't exit on command not found
set -e
set +u

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Function to convert string to uppercase
to_upper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

# Embedded file contents (will be replaced by actual content)
COLORS_MK="__COLORS_MK__"

# Target-specific embedded contents
__TARGETS_VARS__

# Decode function
decode_content() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "$1" | base64 -D
    else
        echo "$1" | base64 -d
    fi
}

update_makefile() {
    local temp_file=$(mktemp)
    local makefile="Makefile"
    local backup_file="${makefile}.backup"

    echo -e "${CYAN}Creating/updating Makefile at: $(pwd)/${makefile}${NC}"

    # Backup existing Makefile if it exists
    if [ -f "$makefile" ]; then
        cp "$makefile" "$backup_file"
        echo -e "${CYAN}Created backup at: $(pwd)/${backup_file}${NC}"
    fi

    # Create base content
    cat > "$temp_file" << 'EOF'
# This Makefile was updated by mktools installer
# Original content is preserved and merged with mktools targets

# Default to help if no target is specified
.DEFAULT_GOAL := help

EOF

    # Add .PHONY declarations
    echo "# Combined .PHONY declarations" >> "$temp_file"
    {
        echo ".PHONY: help release"
        for target_dir in src/targets/*/; do
            if [ -d "$target_dir" ]; then
                echo ".PHONY: $(basename "$target_dir")"
            fi
        done
    } | sort -u >> "$temp_file"
    echo "" >> "$temp_file"

    # Add content directly
    echo "# BEGIN MKTOOLS CONTENT" >> "$temp_file"
    echo "# Colors and common functions" >> "$temp_file"
    decode_content "$COLORS_MK" >> "$temp_file"
    echo "" >> "$temp_file"

    # Add target content directly
    for target_dir in src/targets/*/; do
        if [ -d "$target_dir" ]; then
            target=$(basename "$target_dir")
            target_upper=$(to_upper "$target")
            init_var="${target_upper}_INIT"
            vars_var="${target_upper}_VARS"

            if [ -n "${!vars_var}" ]; then
                echo "# Variables for target: $target" >> "$temp_file"
                decode_content "${!vars_var}" >> "$temp_file"
                echo "" >> "$temp_file"
            fi

            if [ -n "${!init_var}" ]; then
                echo "# Content for target: $target" >> "$temp_file"
                decode_content "${!init_var}" | grep -v "^include" >> "$temp_file"
                echo "" >> "$temp_file"
            fi
        fi
    done
    echo "# END MKTOOLS CONTENT" >> "$temp_file"
    echo "" >> "$temp_file"

    # Add release target
    cat << 'EOF' >> "$temp_file"
release:
	@if [ -z "$(VERSION)" ]; then echo "Please specify the VERSION, e.g., make release VERSION=1.0.0" && exit 1; fi
	@if git rev-parse "v$(VERSION)" >/dev/null 2>&1; then echo "Version v$(VERSION) already exists!" && exit 1; fi
	@echo "Creating new release for version $(VERSION)"
	@git tag -a "v$(VERSION)" -m "Release version $(VERSION)"
	@git push origin "v$(VERSION)"
	@echo "Release v$(VERSION) pushed to origin."
EOF

    # Move temporary file to final location
    mv "$temp_file" "$makefile"

    # Make sure we use tabs for indentation
    sed -i'.bak' 's/^    /\t/g' "$makefile"
    rm -f "${makefile}.bak"

    echo -e "${GREEN}Successfully updated Makefile at: $(pwd)/${makefile}${NC}"
}


# Ensure target directory exists
ensure_target_dir() {
    local target=$1
    local target_dir="src/targets/$target"
    mkdir -p "$target_dir"
}

# Install specific target
install_target() {
    local target=$1
    local target_upper=$(to_upper "$target")
    local init_var="${target_upper}_INIT"
    local vars_var="${target_upper}_VARS"

    ensure_target_dir "$target"

    if [ -n "${!init_var}" ]; then
        decode_content "${!init_var}" > "src/targets/$target/__init__.mk"
    fi

    if [ -n "${!vars_var}" ]; then
        decode_content "${!vars_var}" > "src/targets/$target/__vars__.mk"
    fi
}

# Main installation
main() {

    # Detect if we're running in a pipe
    if [ -t 0 ]; then
        # Running interactively
        INTERACTIVE=true
    else
        # Running in a pipe
        INTERACTIVE=false
    fi

    echo -e "${CYAN}Welcome to mktools installer${NC}"
    echo -e "${CYAN}Will install in current directory: $(pwd)${NC}"

    # Only ask for confirmation if running interactively
    if [ "$INTERACTIVE" = true ]; then
        local confirm
        while true; do
            echo -n "Continue with installation? [Y/n] "
            read -r confirm
            confirm=${confirm:-Y}
            if [[ "$confirm" =~ ^[YyNn]$ ]]; then
                break
            fi
            echo "Please answer Y or N"
        done

        if [[ "$confirm" =~ ^[Nn]$ ]]; then
            echo -e "${YELLOW}Installation cancelled${NC}"
            exit 0
        fi
    else
        # When piped, proceed automatically after a short delay
        echo "Installing automatically in 3 seconds..."
        sleep 3
    fi

    local confirm
    while true; do
        echo -n "Continue with installation? [Y/n] "
        read -r confirm
        confirm=${confirm:-Y}
        if [[ "$confirm" =~ ^[YyNn]$ ]]; then
            break
        fi
        echo "Please answer Y or N"
    done

    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo -e "${YELLOW}Installation cancelled${NC}"
        exit 0
    fi

    echo -e "${CYAN}Proceeding with installation...${NC}"

    # Create src directory structure
    mkdir -p src/common
    mkdir -p src/targets

    # Create temporary file for Makefile content
    local temp_file=$(mktemp)

    # Install common files
    echo -e "${CYAN}Installing common files...${NC}"
    decode_content "$COLORS_MK" > "src/common/colors.mk"

    # Find and install all available targets
    for target_dir in src/targets/*/; do
        if [ -d "$target_dir" ]; then
            target=$(basename "$target_dir")
            target_var="$(to_upper $target)_INIT"
            if [ -n "${!target_var}" ]; then
                echo -e "${CYAN}Installing $target target...${NC}"
                install_target "$target"
            fi
        fi
    done

    # Update Makefile
    update_makefile "$temp_file"
    rm -f "$temp_file"

    echo -e "${GREEN}Installation complete!${NC}"
    echo "You can now use 'make help' to see available targets"
}

# Run main function
main "$@"
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set build variables
        id: vars
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          VERSION=${{ steps.vars.outputs.VERSION }}
          COMMIT=${{ steps.vars.outputs.COMMIT }}
          DATE=${{ steps.vars.outputs.DATE }}
          
          LDFLAGS="-X github.com/amenophis1er/mktools/version.Version=${VERSION} \
                  -X github.com/amenophis1er/mktools/version.Commit=${COMMIT} \
                  -X github.com/amenophis1er/mktools/version.Date=${DATE}"

          GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o mktools-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o mktools-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o mktools-linux-amd64
          GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o mktools-linux-arm64
          GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o mktools-windows-amd64.exe

      - name: Generate checksums
        id: checksums
        run: |
          echo "darwin_arm64=$(sha256sum mktools-darwin-arm64 | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
          echo "darwin_amd64=$(sha256sum mktools-darwin-amd64 | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
          echo "linux_amd64=$(sha256sum mktools-linux-amd64 | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
          echo "linux_arm64=$(sha256sum mktools-linux-arm64 | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
          sha256sum mktools-* > checksums.txt

      - name: Generate Changelog
        id: changelog
        run: |
          git tag -l --sort=-v:refname | head -n 2 | tac | xargs -I {} git log --pretty=format:"* %s" {}..HEAD > CHANGELOG.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mktools-*
            checksums.txt
          body_path: CHANGELOG.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout homebrew-mktools
        uses: actions/checkout@v3
        with:
          repository: amenophis1er/homebrew-mktools
          path: homebrew-mktools
          token: ${{ secrets.GH_PAT }}

      - name: Update Homebrew Formula
        run: |
          VERSION=${{ steps.vars.outputs.VERSION }}
          cat > homebrew-mktools/Formula/mktools.rb << EOF
          class Mktools < Formula
            desc "CLI tool for generating LLM context and development tasks"
            homepage "https://github.com/amenophis1er/mktools"
            version "$VERSION"

            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/amenophis1er/mktools/releases/download/$VERSION/mktools-darwin-arm64"
                sha256 "${{ steps.checksums.outputs.darwin_arm64 }}"
              else
                url "https://github.com/amenophis1er/mktools/releases/download/$VERSION/mktools-darwin-amd64"
                sha256 "${{ steps.checksums.outputs.darwin_amd64 }}"
              end
            end

            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/amenophis1er/mktools/releases/download/$VERSION/mktools-linux-arm64"
                sha256 "${{ steps.checksums.outputs.linux_arm64 }}"
              else
                url "https://github.com/amenophis1er/mktools/releases/download/$VERSION/mktools-linux-amd64"
                sha256 "${{ steps.checksums.outputs.linux_amd64 }}"
              end
            end

            def install
              bin.install Dir["*"][0] => "mktools"
            end

            test do
              assert_match version.to_s, shell_output("\#{bin}/mktools version")
            end
          end
          EOF

      - name: Commit and Push Formula
        run: |
          cd homebrew-mktools
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add Formula/mktools.rb
          git commit -m "chore: update mktools to ${{ steps.vars.outputs.VERSION }}"
          git push